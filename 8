#include <stdio.h>
#include <stdbool.h>

struct Process {
    int pid;             
    int burst_time;      
    int remaining_time;  
    int wait_time;       
    int turn_time;       
    int arrival_time;   
};

void calculateTimes(struct Process processes[], int n, int quantum) {
    int time = 0;        
    int completed = 0;   
    bool done;

    while (completed < n) {
        done = true;

        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= time && processes[i].remaining_time > 0) {
                done = false;

                if (processes[i].remaining_time > quantum) {
                    time += quantum;
                    processes[i].remaining_time -= quantum;
                } else {
                    time += processes[i].remaining_time;
                    processes[i].wait_time = time - processes[i].burst_time - processes[i].arrival_time;
                    processes[i].remaining_time = 0;
                    completed++;
                }
            }
        }

        if (done)
            time++;
    }

    for (int i = 0; i < n; i++) {
        processes[i].turn_time = processes[i].burst_time + processes[i].wait_time;
    }
}

void printProcesses(struct Process processes[], int n) {
    printf("\nPID\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].arrival_time, processes[i].burst_time, processes[i].wait_time, processes[i].turn_time);
    }
}

void calculateAverageTimes(struct Process processes[], int n) {
    float total_wait_time = 0, total_turn_time = 0;

    for (int i = 0; i < n; i++) {
        total_wait_time += processes[i].wait_time;
        total_turn_time += processes[i].turn_time;
    }

    printf("\nAverage Waiting Time: %.2f\n", total_wait_time / n);
    printf("Average Turnaround Time: %.2f\n", total_turn_time / n);
}

int main() {
    int n, quantum;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
    }

    printf("Enter time quantum: ");
    scanf("%d", &quantum);

    calculateTimes(processes, n, quantum);

    printProcesses(processes, n);

    calculateAverageTimes(processes, n);

    return 0;
}

output:
Enter the number of processes: 3
Enter arrival time for process 1: 3
Enter burst time for process 1: 2
Enter arrival time for process 2: 1
Enter burst time for process 2: 5
Enter arrival time for process 3: 1
Enter burst time for process 3: 6
Enter time quantum: 9
PID	Arrival Time	Burst Time	Waiting Time	Turnaround Time
1	       3		         2		       9		         11
2	       1		         5		       0		         5
3	       1		         6		       5		         11

Average Waiting Time: 4.67
Average Turnaround Time: 9.00
